Genrator -
yield - The yield keyword is used to return a list of values from a function.
	  -	Unlike the return keyword which stops further execution of the function, the yield keyword continues to the end of the function.

decorators - In Python, decorators are a powerful and flexible way to modify or extend the behavior of functions or methods,
			without changing their actual code

  
constructor - 
In Python, a constructor is a special method that is called automatically when an object is created from a class.
	__new__: Creates a new instance of a class.
	__init__: Initializes the created instance.
	Type : 1) default constructor - 
				class Car:
					def __init__(self):
						#Initialize the Car with default attributes
						self.make = "Toyota"
						self.model = "Corolla"
						self.year = 2020
						
				# Creating an instance using the default constructor
				car = Car()
				print(car.make)
				print(car.model)
				print(car.year)
				
		   2) parameterized constructor -
				class Car:
					def __init__(self, make, model, year):
						#Initialize the Car with specific attributes.
						self.make = make
						self.model = model
						self.year = year

				# Creating an instance using the parameterized constructor
				car = Car("Honda", "Civic", 2022)
				print(car.make)
				print(car.model)
				print(car.year)
				
				
diffrence -		python 2                         	python 3

release date 	2000								3000

Syntax			complex and difficult 				easy and readable

Performance		slow due to design					improved compared to python 2

print 			print as statement 					print as function 
				print 'name'						print(name)
				
integer division 5/2 = 2							5/2 = 2.5

value store 	ascii								unicode

range 			xrange()							range() more efficiant 


diff in set and frozen set : 

	both are same just frozen set is immutable. you can not add or remove the values

super(): 
		When you use super(), you're referring to the parent class, and you can call methods or access attributes of that class.
		The advantage of using super() is that you donâ€™t have to explicitly reference the parent class by name.
		
reseved keyword : total 36
		if elif else try except finally break pass continue from for while class is not global def return import yeild
		
		
lambda - 


regex - 

re.match :
x = "email_id"
pattern = r"^[a-zA-Z0-9-_]+@[A-Za-z0-9]+\.[A-Za-z]{2,3}$"
new_mail = re.match(pattern,x)
print(sorted(new_mail))

re.split:
print(re.split('\d+', 'On 12th Jan 2016, at 11:02 AM', 1))

re.sub:
re.sub(pattern, repl, string, count=0, flags=0)

Types of Inheritance:

Single Inheritance: A child class inherits from a single parent class.
Multiple Inheritance: A child class inherits from more than one parent class.
Multilevel Inheritance: A child class inherits from a parent class, which in turn inherits from another class.
Hierarchical Inheritance: Multiple child classes inherit from a single parent class.
Hybrid Inheritance: A combination of two or more types of inheritance


# Single Inheritance
class Dog:
    def __init__(self, name):
        self.name = name

    def display_name(self):
        print(f"Dog's Name: {self.name}")

class Labrador(Dog):  # Single Inheritance
    def sound(self):
        print("Labrador woofs")

# Multilevel Inheritance
class GuideDog(Labrador):  # Multilevel Inheritance
    def guide(self):
        print(f"{self.name}Guides the way!")

# Multiple Inheritance
class Friendly:
    def greet(self):
        print("Friendly!")

class GoldenRetriever(Dog, Friendly):  # Multiple Inheritance
    def sound(self):
        print("Golden Retriever Barks")

# Example Usage
lab = Labrador("Buddy")
lab.display_name()
lab.sound()

guide_dog = GuideDog("Max")
guide_dog.display_name()
guide_dog.guide()

retriever = GoldenRetriever("Charlie")
retriever.display_name()
retriever.greet()
retriever.sound()

		

		